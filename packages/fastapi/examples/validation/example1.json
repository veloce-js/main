[
  {
    type: 'ImportDeclaration',
    span: { start: 60, end: 133, ctxt: 0 },
    specifiers: [
      {
        type: 'ImportSpecifier',
        span: { start: 71, end: 78, ctxt: 0 },
        local: {
          type: 'Identifier',
          span: { start: 71, end: 78, ctxt: 0 },
          value: 'FastApi',
          optional: false
        },
        imported: null,
        isTypeOnly: false
      },
      {
        type: 'ImportSpecifier',
        span: { start: 82, end: 86, ctxt: 0 },
        local: {
          type: 'Identifier',
          span: { start: 82, end: 86, ctxt: 0 },
          value: 'Rest',
          optional: false
        },
        imported: null,
        isTypeOnly: false
      },
      {
        type: 'ImportSpecifier',
        span: { start: 90, end: 93, ctxt: 0 },
        local: {
          type: 'Identifier',
          span: { start: 90, end: 93, ctxt: 0 },
          value: 'Get',
          optional: false
        },
        imported: null,
        isTypeOnly: false
      },
      {
        type: 'ImportSpecifier',
        span: { start: 97, end: 101, ctxt: 0 },
        local: {
          type: 'Identifier',
          span: { start: 97, end: 101, ctxt: 0 },
          value: 'Post',
          optional: false
        },
        imported: null,
        isTypeOnly: false
      },
      {
        type: 'ImportSpecifier',
        span: { start: 105, end: 113, ctxt: 0 },
        local: {
          type: 'Identifier',
          span: { start: 105, end: 113, ctxt: 0 },
          value: 'Validate',
          optional: false
        },
        imported: null,
        isTypeOnly: false
      }
    ],
    source: {
      type: 'StringLiteral',
      span: { start: 122, end: 133, ctxt: 0 },
      value: '../../src',
      raw: "'../../src'"
    },
    typeOnly: false,
    asserts: null
  },
  {
    type: 'ExportDeclaration',
    span: { start: 141, end: 683, ctxt: 0 },
    declaration: {
      type: 'ClassDeclaration',
      identifier: {
        type: 'Identifier',
        span: { start: 154, end: 159, ctxt: 0 },
        value: 'MyApi',
        optional: false
      },
      declare: false,
      span: { start: 148, end: 683, ctxt: 0 },
      decorators: [
        {
          type: 'Decorator',
          span: { start: 135, end: 140, ctxt: 0 },
          expression: {
            type: 'Identifier',
            span: { start: 136, end: 140, ctxt: 0 },
            value: 'Rest',
            optional: false
          }
        }
      ],
      body: [
        {
          type: 'ClassMethod',
          span: { start: 181, end: 299, ctxt: 0 },
          key: {
            type: 'Identifier',
            span: { start: 204, end: 208, ctxt: 0 },
            value: 'post',
            optional: false
          },
          function: {
            params: [
              {
                type: 'Parameter',
                span: { start: 209, end: 224, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 209, end: 224, ctxt: 0 },
                  value: 'userId',
                  optional: true,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 216, end: 224, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsKeywordType',
                      span: { start: 218, end: 224, ctxt: 0 },
                      kind: 'number'
                    }
                  }
                }
              }
            ],
            decorators: [
              {
                type: 'Decorator',
                span: { start: 181, end: 194, ctxt: 0 },
                expression: {
                  type: 'CallExpression',
                  span: { start: 182, end: 194, ctxt: 0 },
                  callee: {
                    type: 'Identifier',
                    span: { start: 182, end: 185, ctxt: 0 },
                    value: 'Get',
                    optional: false
                  },
                  arguments: [
                    {
                      spread: null,
                      expression: {
                        type: 'StringLiteral',
                        span: { start: 186, end: 193, ctxt: 0 },
                        value: '/post',
                        raw: "'/post'"
                      }
                    }
                  ],
                  typeArguments: null
                }
              }
            ],
            span: { start: 181, end: 299, ctxt: 0 },
            body: {
              type: 'BlockStatement',
              span: { start: 226, end: 299, ctxt: 0 },
              stmts: [
                {
                  type: 'ReturnStatement',
                  span: { start: 278, end: 295, ctxt: 0 },
                  argument: {
                    type: 'ObjectExpression',
                    span: { start: 285, end: 295, ctxt: 0 },
                    properties: [
                      {
                        type: 'Identifier',
                        span: { start: 287, end: 293, ctxt: 0 },
                        value: 'userId',
                        optional: false
                      }
                    ]
                  }
                }
              ]
            },
            generator: false,
            async: false,
            typeParameters: null,
            returnType: null
          },
          kind: 'method',
          isStatic: false,
          accessibility: 'public',
          isAbstract: false,
          isOptional: false,
          isOverride: false
        },
        {
          type: 'ClassMethod',
          span: { start: 303, end: 501, ctxt: 0 },
          key: {
            type: 'Identifier',
            span: { start: 380, end: 385, ctxt: 0 },
            value: 'login',
            optional: false
          },
          function: {
            params: [
              {
                type: 'Parameter',
                span: { start: 386, end: 402, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 386, end: 402, ctxt: 0 },
                  value: 'username',
                  optional: false,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 394, end: 402, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsKeywordType',
                      span: { start: 396, end: 402, ctxt: 0 },
                      kind: 'string'
                    }
                  }
                }
              },
              {
                type: 'Parameter',
                span: { start: 404, end: 420, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 404, end: 420, ctxt: 0 },
                  value: 'password',
                  optional: false,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 412, end: 420, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsKeywordType',
                      span: { start: 414, end: 420, ctxt: 0 },
                      kind: 'string'
                    }
                  }
                }
              }
            ],
            decorators: [
              {
                type: 'Decorator',
                span: { start: 303, end: 352, ctxt: 0 },
                expression: {
                  type: 'CallExpression',
                  span: { start: 304, end: 352, ctxt: 0 },
                  callee: {
                    type: 'Identifier',
                    span: { start: 304, end: 312, ctxt: 0 },
                    value: 'Validate',
                    optional: false
                  },
                  arguments: [
                    {
                      spread: null,
                      expression: {
                        type: 'ArrayExpression',
                        span: { start: 313, end: 351, ctxt: 0 },
                        elements: [
                          {
                            spread: null,
                            expression: {
                              type: 'ObjectExpression',
                              span: { start: 319, end: 347, ctxt: 0 },
                              properties: [
                                {
                                  type: 'KeyValueProperty',
                                  key: {
                                    type: 'Identifier',
                                    span: { start: 320, end: 325, ctxt: 0 },
                                    value: 'rules',
                                    optional: false
                                  },
                                  value: {
                                    type: 'ObjectExpression',
                                    span: { start: 327, end: 346, ctxt: 0 },
                                    properties: [
                                      {
                                        type: 'KeyValueProperty',
                                        key: {
                                          type: 'Identifier',
                                          span: {
                                            start: 329,
                                            end: 332,
                                            ctxt: 0
                                          },
                                          value: 'min',
                                          optional: false
                                        },
                                        value: {
                                          type: 'NumericLiteral',
                                          span: {
                                            start: 334,
                                            end: 335,
                                            ctxt: 0
                                          },
                                          value: 8,
                                          raw: '8'
                                        }
                                      },
                                      {
                                        type: 'KeyValueProperty',
                                        key: {
                                          type: 'Identifier',
                                          span: {
                                            start: 337,
                                            end: 340,
                                            ctxt: 0
                                          },
                                          value: 'max',
                                          optional: false
                                        },
                                        value: {
                                          type: 'NumericLiteral',
                                          span: {
                                            start: 342,
                                            end: 344,
                                            ctxt: 0
                                          },
                                          value: 15,
                                          raw: '15'
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ],
                  typeArguments: null
                }
              },
              {
                type: 'Decorator',
                span: { start: 355, end: 370, ctxt: 0 },
                expression: {
                  type: 'CallExpression',
                  span: { start: 356, end: 370, ctxt: 0 },
                  callee: {
                    type: 'Identifier',
                    span: { start: 356, end: 360, ctxt: 0 },
                    value: 'Post',
                    optional: false
                  },
                  arguments: [
                    {
                      spread: null,
                      expression: {
                        type: 'StringLiteral',
                        span: { start: 361, end: 369, ctxt: 0 },
                        value: '/login',
                        raw: "'/login'"
                      }
                    }
                  ],
                  typeArguments: null
                }
              }
            ],
            span: { start: 303, end: 501, ctxt: 0 },
            body: {
              type: 'BlockStatement',
              span: { start: 422, end: 501, ctxt: 0 },
              stmts: [
                {
                  type: 'ExpressionStatement',
                  span: { start: 429, end: 450, ctxt: 0 },
                  expression: {
                    type: 'CallExpression',
                    span: { start: 429, end: 450, ctxt: 0 },
                    callee: {
                      type: 'MemberExpression',
                      span: { start: 429, end: 440, ctxt: 0 },
                      object: {
                        type: 'Identifier',
                        span: { start: 429, end: 436, ctxt: 0 },
                        value: 'console',
                        optional: false
                      },
                      property: {
                        type: 'Identifier',
                        span: { start: 437, end: 440, ctxt: 0 },
                        value: 'log',
                        optional: false
                      }
                    },
                    arguments: [
                      {
                        spread: null,
                        expression: {
                          type: 'Identifier',
                          span: { start: 441, end: 449, ctxt: 0 },
                          value: 'password',
                          optional: false
                        }
                      }
                    ],
                    typeArguments: null
                  }
                },
                {
                  type: 'ReturnStatement',
                  span: { start: 456, end: 497, ctxt: 0 },
                  argument: {
                    type: 'ObjectExpression',
                    span: { start: 463, end: 497, ctxt: 0 },
                    properties: [
                      {
                        type: 'Identifier',
                        span: { start: 465, end: 473, ctxt: 0 },
                        value: 'username',
                        optional: false
                      },
                      {
                        type: 'KeyValueProperty',
                        key: {
                          type: 'Identifier',
                          span: { start: 475, end: 484, ctxt: 0 },
                          value: 'timestamp',
                          optional: false
                        },
                        value: {
                          type: 'CallExpression',
                          span: { start: 486, end: 496, ctxt: 0 },
                          callee: {
                            type: 'MemberExpression',
                            span: { start: 486, end: 494, ctxt: 0 },
                            object: {
                              type: 'Identifier',
                              span: { start: 486, end: 490, ctxt: 0 },
                              value: 'Date',
                              optional: false
                            },
                            property: {
                              type: 'Identifier',
                              span: { start: 491, end: 494, ctxt: 0 },
                              value: 'now',
                              optional: false
                            }
                          },
                          arguments: [],
                          typeArguments: null
                        }
                      }
                    ]
                  }
                }
              ]
            },
            generator: false,
            async: false,
            typeParameters: null,
            returnType: null
          },
          kind: 'method',
          isStatic: false,
          accessibility: 'public',
          isAbstract: false,
          isOptional: false,
          isOverride: false
        },
        {
          type: 'ClassMethod',
          span: { start: 505, end: 676, ctxt: 0 },
          key: {
            type: 'Identifier',
            span: { start: 546, end: 553, ctxt: 0 },
            value: 'publish',
            optional: false
          },
          function: {
            params: [
              {
                type: 'Parameter',
                span: { start: 554, end: 569, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 554, end: 569, ctxt: 0 },
                  value: 'content',
                  optional: false,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 561, end: 569, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsKeywordType',
                      span: { start: 563, end: 569, ctxt: 0 },
                      kind: 'string'
                    }
                  }
                }
              },
              {
                type: 'Parameter',
                span: { start: 571, end: 584, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 571, end: 584, ctxt: 0 },
                  value: 'title',
                  optional: false,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 576, end: 584, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsKeywordType',
                      span: { start: 578, end: 584, ctxt: 0 },
                      kind: 'string'
                    }
                  }
                }
              },
              {
                type: 'Parameter',
                span: { start: 586, end: 610, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 586, end: 610, ctxt: 0 },
                  value: 'userId',
                  optional: true,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 593, end: 610, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsUnionType',
                      span: { start: 595, end: 610, ctxt: 0 },
                      types: [
                        {
                          type: 'TsKeywordType',
                          span: { start: 595, end: 601, ctxt: 0 },
                          kind: 'number'
                        },
                        {
                          type: 'TsKeywordType',
                          span: { start: 604, end: 610, ctxt: 0 },
                          kind: 'string'
                        }
                      ]
                    }
                  }
                }
              }
            ],
            decorators: [
              {
                type: 'Decorator',
                span: { start: 505, end: 516, ctxt: 0 },
                expression: {
                  type: 'CallExpression',
                  span: { start: 506, end: 516, ctxt: 0 },
                  callee: {
                    type: 'Identifier',
                    span: { start: 506, end: 514, ctxt: 0 },
                    value: 'Validate',
                    optional: false
                  },
                  arguments: [],
                  typeArguments: null
                }
              },
              {
                type: 'Decorator',
                span: { start: 519, end: 536, ctxt: 0 },
                expression: {
                  type: 'CallExpression',
                  span: { start: 520, end: 536, ctxt: 0 },
                  callee: {
                    type: 'Identifier',
                    span: { start: 520, end: 524, ctxt: 0 },
                    value: 'Post',
                    optional: false
                  },
                  arguments: [
                    {
                      spread: null,
                      expression: {
                        type: 'StringLiteral',
                        span: { start: 525, end: 535, ctxt: 0 },
                        value: '/publish',
                        raw: "'/publish'"
                      }
                    }
                  ],
                  typeArguments: null
                }
              }
            ],
            span: { start: 505, end: 676, ctxt: 0 },
            body: {
              type: 'BlockStatement',
              span: { start: 612, end: 676, ctxt: 0 },
              stmts: [
                {
                  type: 'ExpressionStatement',
                  span: { start: 619, end: 647, ctxt: 0 },
                  expression: {
                    type: 'CallExpression',
                    span: { start: 619, end: 647, ctxt: 0 },
                    callee: {
                      type: 'MemberExpression',
                      span: { start: 619, end: 630, ctxt: 0 },
                      object: {
                        type: 'Identifier',
                        span: { start: 619, end: 626, ctxt: 0 },
                        value: 'console',
                        optional: false
                      },
                      property: {
                        type: 'Identifier',
                        span: { start: 627, end: 630, ctxt: 0 },
                        value: 'log',
                        optional: false
                      }
                    },
                    arguments: [
                      {
                        spread: null,
                        expression: {
                          type: 'Identifier',
                          span: { start: 631, end: 638, ctxt: 0 },
                          value: 'content',
                          optional: false
                        }
                      },
                      {
                        spread: null,
                        expression: {
                          type: 'Identifier',
                          span: { start: 640, end: 646, ctxt: 0 },
                          value: 'userId',
                          optional: false
                        }
                      }
                    ],
                    typeArguments: null
                  }
                },
                {
                  type: 'ReturnStatement',
                  span: { start: 653, end: 672, ctxt: 0 },
                  argument: {
                    type: 'ObjectExpression',
                    span: { start: 660, end: 672, ctxt: 0 },
                    properties: [
                      {
                        type: 'KeyValueProperty',
                        key: {
                          type: 'Identifier',
                          span: { start: 662, end: 664, ctxt: 0 },
                          value: 'OK',
                          optional: false
                        },
                        value: {
                          type: 'BooleanLiteral',
                          span: { start: 666, end: 670, ctxt: 0 },
                          value: true
                        }
                      }
                    ]
                  }
                }
              ]
            },
            generator: false,
            async: false,
            typeParameters: null,
            returnType: null
          },
          kind: 'method',
          isStatic: false,
          accessibility: 'public',
          isAbstract: false,
          isOptional: false,
          isOverride: false
        }
      ],
      superClass: {
        type: 'Identifier',
        span: { start: 168, end: 175, ctxt: 0 },
        value: 'FastApi',
        optional: false
      },
      isAbstract: false,
      typeParams: null,
      superTypeParams: null,
      implements: []
    }
  }
]
